import pygame
import random
import sys

# Initialize Pygame
pygame.init()

# Set up display
WIDTH = 800
HEIGHT = 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Bubble Pop!")

# Colors
COLORS = [
    (255, 0, 0),     # Red
    (0, 255, 0),     # Green
    (0, 0, 255),     # Blue
    (255, 255, 0),   # Yellow
    (255, 0, 255),   # Purple
]

# Bubble class
class Bubble:
    def __init__(self):
        self.size = random.randint(30, 70)
        self.x = random.randint(self.size, WIDTH - self.size)
        self.y = HEIGHT + self.size
        self.speed = random.uniform(1, 3)
        self.color = random.choice(COLORS)
        self.popped = False

    def move(self):
        self.y -= self.speed

    def draw(self):
        pygame.draw.circle(screen, self.color, (int(self.x), int(self.y)), self.size)

    def clicked(self, pos):
        distance = ((pos[0] - self.x) ** 2 + (pos[1] - self.y) ** 2) ** 0.5
        return distance <= self.size

# Game variables
bubbles = []
score = 0
font = pygame.font.Font(None, 48)
pop_sound = pygame.mixer.Sound("pop.wav")  # You'll need to add a pop sound file

# Game loop
clock = pygame.time.Clock()
spawn_timer = 0

while True:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        
        if event.type == pygame.MOUSEBUTTONDOWN:
            for bubble in bubbles:
                if bubble.clicked(pygame.mouse.get_pos()) and not bubble.popped:
                    bubble.popped = True
                    score += 10
                    pygame.mixer.Sound.play(pop_sound)

    # Spawn new bubbles
    spawn_timer += 1
    if spawn_timer >= 60:  # Spawn a new bubble every 60 frames
        bubbles.append(Bubble())
        spawn_timer = 0

    # Update
    screen.fill((135, 206, 235))  # Sky blue background
    
    # Update and draw bubbles
    for bubble in bubbles[:]:
        if not bubble.popped:
            bubble.move()
            bubble.draw()
        if bubble.y < -bubble.size or bubble.popped:
            bubbles.remove(bubble)

    # Draw score
    score_text = font.render(f"Score: {score}", True, (0, 0, 0))
    screen.blit(score_text, (10, 10))

    pygame.display.flip()
    clock.tick(60)